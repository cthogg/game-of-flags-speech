{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["countries","AD","name","native","phone","continent","capital","currency","languages","emoji","emojiU","AE","AF","SpeechRecognition","_ref","transcript","resetTranscript","browserSupportsSpeechRecognition","numberOfCountries","Object","keys","length","_useState","useState","_useState2","slicedToArray","playState","setPlayState","_useState3","_useState4","countryNumber","setCountryNumber","_useState5","_useState6","lastRightWrong","setLastRightWrong","_useState7","_useState8","lastCorrectAnswer","setLastCorrectAnswer","selectedCountryObject","values","selectionCountryName","selectionCountryEmoji","includes","react_default","a","createElement","onClick","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+KAQMA,EAAY,CAChBC,GAAM,CACJC,KAAQ,UACRC,OAAU,UACVC,MAAS,MACTC,UAAa,KACbC,QAAW,mBACXC,SAAY,MACZC,UAAa,CACX,MAEFC,MAAS,2BACTC,OAAU,mBAEZC,GAAM,CACJT,KAAQ,uBACRC,OAAU,kKACVC,MAAS,MACTC,UAAa,KACbC,QAAW,YACXC,SAAY,MACZC,UAAa,CACX,MAEFC,MAAS,2BACTC,OAAU,mBAEZE,GAAM,CACJV,KAAQ,cACRC,OAAU,yDACVC,MAAS,KACTC,UAAa,KACbC,QAAW,QACXC,SAAY,MACZC,UAAa,CACX,KACA,KACA,MAEFC,MAAS,2BACTC,OAAU,oBAqECG,WA3DI,SAAAC,GAIb,IAHJC,EAGID,EAHJC,WACAC,EAEIF,EAFJE,gBACAC,EACIH,EADJG,iCAEMC,EAAoBC,OAAOC,KAAKpB,GAAWqB,OAD7CC,EAE8BC,mBA5DjB,SA0DbC,EAAAL,OAAAM,EAAA,EAAAN,CAAAG,EAAA,GAEGI,EAFHF,EAAA,GAEcG,EAFdH,EAAA,GAAAI,EAGsCL,mBAAS,GAH/CM,EAAAV,OAAAM,EAAA,EAAAN,CAAAS,EAAA,GAGGE,EAHHD,EAAA,GAGkBE,EAHlBF,EAAA,GAAAG,EAIwCT,oBAAS,GAJjDU,EAAAd,OAAAM,EAAA,EAAAN,CAAAa,EAAA,GAIGE,EAJHD,EAAA,GAImBE,EAJnBF,EAAA,GAAAG,EAK8Cb,mBAAS,IALvDc,EAAAlB,OAAAM,EAAA,EAAAN,CAAAiB,EAAA,GAKGE,EALHD,EAAA,GAKsBE,EALtBF,EAAA,GAMAG,EAAwBrB,OAAOsB,OAAOzC,GAAW8B,GACjDY,EAAuBF,EAAsBtC,KAC7CyC,EAAwBH,EAAsB/B,MAClD,MAnEiB,UAmEdiB,GACEX,EAAW6B,SAAS,UACrBjB,EApEc,QAsETkB,EAAAC,EAAAC,cAAA,eAAMF,EAAAC,EAAAC,cAAA,iCAAN,IAAkCF,EAAAC,EAAAC,cAAA,UAAQC,QAAS,kBAAIrB,EAtE9C,UAsEyB,aAExCG,IAAgBZ,EAAkB,EAC5B2B,EAAAC,EAAAC,cAAA,eAAMF,EAAAC,EAAAC,cAAA,yBAAN,IAA0BF,EAAAC,EAAAC,cAAA,UAAQC,QAAS,WAAMrB,EA1EzC,SA0EmEI,EAAiB,KAAlE,mBAE9Bd,EAIFS,IAAYA,GACVX,EAAW6B,SAASF,KACrBP,GAAkB,GAClBJ,EAAiBD,EAAe,GAChCd,IACAuB,EAAqBG,IAInBG,EAAAC,EAAAC,cAAA,YACoB,IAAjBb,GAAyBW,EAAAC,EAAAC,cAAA,uBACR,IAAjBb,GAA0BW,EAAAC,EAAAC,cAAA,mBAE3BF,EAAAC,EAAAC,cAAA,UAAQC,QAAShC,GAAjB,SACA6B,EAAAC,EAAAC,cAAA,YAAOhC,GACP8B,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,SAAIJ,GACJE,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAAA,aAAKT,EAAL,OAONO,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,iBA7BKF,EAAAC,EAAAC,cAAA,eAAMF,EAAAC,EAAAC,cAAA,gDCrEGE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOV,EAAAC,EAAAC,cAACS,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.082ca2ae.chunk.js","sourcesContent":["import React, {useState} from \"react\";\nimport PropTypes from \"prop-types\";\nimport SpeechRecognition from \"react-speech-recognition\";\n\nconst startState = 'start'\nconst playingState ='play'\nconst endState = 'end'\n\nconst countries = {\n  \"AD\": {\n    \"name\": \"Andorra\",\n    \"native\": \"Andorra\",\n    \"phone\": \"376\",\n    \"continent\": \"EU\",\n    \"capital\": \"Andorra la Vella\",\n    \"currency\": \"EUR\",\n    \"languages\": [\n      \"ca\"\n    ],\n    \"emoji\": \"🇦🇩\",\n    \"emojiU\": \"U+1F1E6 U+1F1E9\"\n  },\n  \"AE\": {\n    \"name\": \"United Arab Emirates\",\n    \"native\": \"دولة الإمارات العربية المتحدة\",\n    \"phone\": \"971\",\n    \"continent\": \"AS\",\n    \"capital\": \"Abu Dhabi\",\n    \"currency\": \"AED\",\n    \"languages\": [\n      \"ar\"\n    ],\n    \"emoji\": \"🇦🇪\",\n    \"emojiU\": \"U+1F1E6 U+1F1EA\"\n  },\n  \"AF\": {\n    \"name\": \"Afghanistan\",\n    \"native\": \"افغانستان\",\n    \"phone\": \"93\",\n    \"continent\": \"AS\",\n    \"capital\": \"Kabul\",\n    \"currency\": \"AFN\",\n    \"languages\": [\n      \"ps\",\n      \"uz\",\n      \"tk\"\n    ],\n    \"emoji\": \"🇦🇫\",\n    \"emojiU\": \"U+1F1E6 U+1F1EB\"\n  }}\n\nconst propTypes = {\n  // Props injected by SpeechRecognition\n  transcript: PropTypes.string,\n  resetTranscript: PropTypes.func,\n  browserSupportsSpeechRecognition: PropTypes.bool\n};\n\nconst Dictaphone = ({\n  transcript,\n  resetTranscript,\n  browserSupportsSpeechRecognition\n}) => {\n  const numberOfCountries = Object.keys(countries).length\n  const [playState, setPlayState] = useState(startState)\n  const [countryNumber, setCountryNumber] = useState(0);\n  const [lastRightWrong, setLastRightWrong] = useState(false)\n  const [lastCorrectAnswer, setLastCorrectAnswer] = useState('')\n  let selectedCountryObject = Object.values(countries)[countryNumber]  \n  let selectionCountryName = selectedCountryObject.name  \n  let selectionCountryEmoji = selectedCountryObject.emoji\n  if(playState===startState){\n    if(transcript.includes('start')){\n      setPlayState(playingState)\n    }\n    return <div> <p> Say Start to begin </p> <button onClick={()=>setPlayState(playingState)}> Start </button></div>\n  }\n  if(countryNumber===numberOfCountries-1){\n    return <div> <p> End of quiz</p> <button onClick={()=> {setPlayState(startState); setCountryNumber(0)}}> Back to Start</button></div>\n  }\n  if (!browserSupportsSpeechRecognition) {\n    return <div> <p> This site only works on Chrome </p></div>;\n  }\n\n  if(playState===playState){\n    if(transcript.includes(selectionCountryName)){\n      setLastRightWrong(true)\n      setCountryNumber(countryNumber +1)\n      resetTranscript()\n      setLastCorrectAnswer(selectionCountryName)\n    }\n\n    return (\n        <div>\n          {lastRightWrong===true && <p> Correct </p>}\n          {lastRightWrong===false && <p> Wrong</p>}\n    \n          <button onClick={resetTranscript}>Reset</button>\n          <span>{transcript}</span>\n          <p> Say the country</p>\n          <p>{selectionCountryEmoji}</p>\n          <p> Last correct answer </p>\n          <p> {lastCorrectAnswer} </p>\n        </div>\n    )\n  }\n\n\n  return (\n    <div>\n      <p> Hi</p>\n    </div>\n  );\n};\n\nDictaphone.propTypes = propTypes;\n\nexport default SpeechRecognition(Dictaphone);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}